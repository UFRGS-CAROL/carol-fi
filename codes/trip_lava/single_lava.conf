[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda-9.2/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double;
# 2 -> random; 3 -> zeros; 4 -> least 16 significant bits (LSB);
# 5 -> least 8 significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_ADD -> Instruction Adress (NOT IMPLEMENTED YET)
injectionSite = RF

# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5


# binary file of the application
# Must be full path
benchmarkBinary = /home/carol/carol-fi/codes/cuda_trip_lava/cuda_trip_lava_single

# Commands to set the session inside GDB environment
benchmarkArgs = -boxes=15 -streams=1 -iterations=3 -verbose -input_distances=/home/carol/carol-fi/codes/trip_lava/lava_single_distances_15 -input_charges=/home/carol/carol-fi/codes/trip_lava/lava_single_charges_15 -output_gold=/home/carol/carol-fi/codes/trip_lava/lava_single_gold_15

# Number of signals to send from SignalApp
seqSignals = 10

# CSV output file. It will be overwrite at each injection
csvFile = ./fi_cuda_trip_lava_single_single_bit.csv

# YOU SHOULD NOW CREATE A SCRIPT ON BENCHMARK SOURCE TO VERIFY THE GOLD OUTPUT x INJ_OUTPUT
# it must contains a function called sdc_check and must return True or False
# True for masked
# False for SDC
goldenCheckScript = codes/trip_lava/sdc_check.sh

initSleep = 0.09
