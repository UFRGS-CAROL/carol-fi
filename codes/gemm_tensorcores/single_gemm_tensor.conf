[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double;
# 2 -> random; 3 -> zeros; 4 -> least 16 significant bits (LSB);
# 5 -> least 8 significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_add -> Instruction Adress (NOT IMPLEMENTED YET)
injectionSite = RF


# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# binary file of the application
# Must be full path
benchmarkBinary = /home/carol/carol-fi/codes/gemm_tensorcores/gemm_wmma


# Commands to set the session inside GDB environment
benchmarkArgs = --size 8192 --generate 0 --verbose 1 --iterations 10 --tensor_cores 1 --triplicated 0 --precision float --input_a /home/carol/carol-fi/codes/gemm_tensorcores/input_a.matrix --input_b /home/carol/carol-fi/codes/gemm_tensorcores/input_b.matrix --input_c /home/carol/carol-fi/codes/gemm_tensorcores/input_c.matrix --gold /home/carol/carol-fi/codes/gemm_tensorcores/gold.matrix 


# CSV output file. It will be overwrite at each injection
csvFile = ./fi_gemm_tensor_float_single_bit.csv

# YOU SHOULD NOW CREATE A SCRIPT ON BENCHMARK SOURCE TO VERIFY THE GOLD OUTPUT x INJ_OUTPUT
# it must contains a function called sdc_check and must return True or False
# True for masked
# False for SDC
goldenCheckScript = codes/gemm_tensorcores/sdc_check.sh

seqSignals = 10

initSleep = 0.09
